version: "2"

# Options for analysis running.
run:
  # Include test files or not.
  tests: true

linters:
  # Disable all linters.
  default: none

  # Enable specific linters.
  enable:
    - errcheck
    - gocritic
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - revive
    - staticcheck
    - unconvert
    - unused

  # all available settings of specific linters
  settings:
    # https://golangci-lint.run/usage/linters/#lll
    lll:
      # Max line length, lines longer will be reported. '\t' is counted as 1
      # character by default, and can be changed with the tab-width option.
      line-length: 120

    # https://golangci-lint.run/usage/linters/#revive
    revive:
      # Run `GL_DEBUG=revive golangci-lint run --enable-only=revive` to see
      # default, all available rules, and enabled rules.
      rules:
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#constant-logical-expr
        - name: constant-logical-expr
          severity: warning
          disabled: false
          exclude:
            - ""

        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#datarace
        - name: datarace
          severity: warning
          disabled: false
          exclude:
            - ""

        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#exported
        - name: exported
          arguments:
            - disableStutteringCheck
            - disableChecksOnTypes
            - disableChecksOnVariables
            - disableChecksOnConstants
          severity: warning
          disabled: false
          exclude:
            - ""

        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#if-return
        - name: if-return
          severity: warning
          disabled: false
          exclude:
            - ""

        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redundant-import-alias
        - name: redundant-import-alias
          severity: warning
          disabled: false
          exclude:
            - ""

        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#superfluous-else
        - name: superfluous-else
          arguments:
            - preserveScope
          severity: warning
          disabled: false
          exclude:
            - ""

        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unreachable-code
        - name: unreachable-code
          severity: warning
          disabled: false
          exclude:
            - ""

        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unused-parameter
        - name: unused-parameter
          arguments:
            - allowRegex: ^_
          severity: warning
          disabled: false
          exclude:
            - ""

  # Defines a set of rules to ignore issues. It does not skip the analysis, and
  # so does not ignore "typecheck" errors.
  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: lax
    generated: lax

    # Log a warning if an exclusion rule is unused.
    # Default: false
    warn-unused: true

issues:
  # Maximum count of issues with the same text. Setting this to zero will disable
  # any limits, meaning all errors will be reported. This is useful if a linter
  # always produces the same error message, or else some errors might be filtered
  max-same-issues: 0

formatters:
  # Enable specific formatter.
  # Default: [] (uses standard Go formatting)
  enable:
    - goimports

  # Defines a set of rules to ignore issues. It does not skip the analysis, and
  # so does not ignore "typecheck" errors.
  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: lax
    generated: lax